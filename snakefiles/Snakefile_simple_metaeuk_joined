# This is the pipeline to run MetaEuk from beginning (given sample accession) without any kraken filtering and bowtie mapping

# Compared to Snakefile_simple here we wisely concatenate all EukRep contigs and running Metaeuk on all of them together. Should speed up.


## Required config parameters:
# SAMPLE - passed with config file by --configfile samples.yaml or --config SAMPLE=SRR2844600
# SAMPLESET - for creating a subfolder dedicated to certain group of samples, listed in yaml file

## Benchmarking mode?

benchmark=True
#benchmark=False

if (benchmark==False):
    downloading_script="download_fastq.sh"
    mincontiglen=5000
    EUK_PROFILES="/mnt/metaeuk_profiles/MMETSP_uniclust50_MERC_profiles_more_than1"
else:
    downloading_script="download_fastq_short.sh" # subsets only first 10k reads
    mincontiglen=100 #otherwise no contigs left, too few reads for 5000kb+ contigs
    EUK_PROFILES="/mnt/metaeuk_profiles_short/MMETSP_uniclust50_MERC_profiles_more_than1_few"


# hardcoded parameters:
mainfolder='/home/ubuntu/EukBook'
maxthreads = snakemake.utils.available_cpu_count()

# Handling different input ways of SAMPLESET config.
# SAMPLESET should be passed with yaml config file alongside with sample accessions.
# Then it is an array of values, of which we have to take only the first argument  - [0].
# But it can be overwritten with --config SAMPLESET=xxx parameter of snakemake command, if needed.
# Then it is a string itself, not array. Applying [0] to string would return only its first character.
if type(config["SAMPLESET"]) is list:
    setn=config["SAMPLESET"][0]
elif type(config["SAMPLESET"]) is str:
    setn=config["SAMPLESET"]



# Email notifications
onstart:
    print("Workflow finished, no error")
    shell("mail -s 'Snakemake - Workflow started' dembra96@gmail.com < {log}" )

onsuccess:
    print("Workflow finished, no error")
    shell("mail -s 'Snakemake - Workflow successfully finished' dembra96@gmail.com < {log}")

onerror:
    print("An error occurred")
    shell("mail -s 'Snakemake - an error occurred' dembra96@gmail.com < {log}")




################
### Workflow ###
################

rule all:
    input:
     # the samples themselves
        #expand("{setn}/{sample}/reads_1.fastq.gz", sample=config["SAMPLE"], setn=config["SAMPLESET"]),
        #expand("{sample}/"reads_2.fastq.gz", sample=config["SAMPLE"]),
        #expand("{sample}/"reads_1_trim.fastq.gz", sample=config["SAMPLE"]),
        #expand("{sample}/"reads_2_trim.fastq.gz", sample=config["SAMPLE"]),
     # can be ommited in benchmarking   
        #expand("{sample}/reads_1_fastqc.html", sample=config["SAMPLE"]),
        #expand("{sample}/reads_2_fastqc.html", sample=config["SAMPLE"]), 
        #expand("{sample}/reads_1_trim_fastqc.html", sample=config["SAMPLE"]),
        #expand("{sample}/reads_2_trim_fastqc.html", sample=config["SAMPLE"]),
     # unfiltered pathway
        expand("{setn}/{sample}/megahit_unfiltered/final.contigs.fa", sample=config["SAMPLE"], setn=setn),      # --min-contig-len 500
        expand("{setn}/{sample}/EukRep_contigs_from_unfiltered.fasta", sample=config["SAMPLE"], setn=setn),   # -m lenient
        #expand("{setn}/{sample}/quast_{sample}", sample=config["SAMPLE"], setn=setn),
        setn+"/quast_multi_raw",
        setn+"/quast_multi_EukRep", # multisample quast for EukRep contigs from all samples. Easy to compare
        setn+"/EukRep_contigs_renamed_cat.fasta",
        setn+"/MetaEuk_preds.fasta",



### Preprocessing
rule download_fastq:
    output: 
        setn+"/{sample}/reads_1.fastq.gz",
        setn+"/{sample}/reads_2.fastq.gz"
    shell: 
        "{mainfolder}/scripts/" + downloading_script + " {wildcards.sample} {output}" 


rule FastQC_untrimmed:
    input:
        setn+"/{sample}/reads_1.fastq.gz",
        setn+"/{sample}/reads_2.fastq.gz"
    output:
        setn+"/{sample}/reads_1_fastqc.html",
        setn+"/{sample}/reads_2_fastqc.html"
    conda:
        mainfolder + "/yaml/conda_packages.yaml"
    threads: 2
    shell: 
        "fastqc -t {threads} {input} "

        
rule fastp_trimming:
    input: 
        setn+"/{sample}/reads_1.fastq.gz",
        setn+"/{sample}/reads_2.fastq.gz"
    output: 
        setn+"/{sample}/reads_1_trim.fastq.gz",
        setn+"/{sample}/reads_2_trim.fastq.gz",
        setn+"/{sample}/fastp.json",
        setn+"/{sample}/fastp.html" 
    threads: 4  
    conda:
        mainfolder + "/yaml/conda_packages.yaml"
    shell: 
        "fastp -r -w {threads} -i {input[0]} -I {input[1]} -o {output[0]} -O {output[1]} -j {output[2]} -h {output[3]}"


rule FastQC_trimmed:
    input:
        setn+"/{sample}/reads_1_trim.fastq.gz",
        setn+"/{sample}/reads_2_trim.fastq.gz"
    output:
        setn+"/{sample}/reads_1_trim_fastqc.html",
        setn+"/{sample}/reads_2_trim_fastqc.html"
        #output is the input without extentiuon plus "_fastqc.html". And "_fastqc.zip".
    conda:
        mainfolder + "/yaml/conda_packages.yaml"
    threads: 2
    shell:
        "fastqc -t {threads} {input} "




### Assembly without filtering

rule megahit_unfiltered:
    input:
        setn+"/{sample}/reads_1_trim.fastq.gz",
        setn+"/{sample}/reads_2_trim.fastq.gz"
    output:
        setn+"/{sample}/megahit_unfiltered/final.contigs.fa",
    log:
        setn+"/{sample}/log_megahit.txt"
    conda:
        mainfolder + "/yaml/megahit.yaml"
    threads: int( maxthreads * 0.5 )
#this will allow two megahits run in parallell and make sure all cores are 100% busy al the time, because with single megahit on all cores they are ~75% occupied on average.
    shell:
        "rm -r "+setn+"/{wildcards.sample}/megahit_unfiltered; "
	"{{ time megahit -t "+str(maxthreads)+" -1 {input[0]} -2 {input[1]} -o '"+setn+"/{wildcards.sample}/megahit_unfiltered' --min-contig-len 500; }} 2> {log}; "
        "touch {setn}/{wildcards.sample}/checkpoint_{wildcards.sample}_is_done.txt" 

rule EukRep_unfiltered:
    input:
        setn+"/{sample}/megahit_unfiltered/final.contigs.fa"
    output:
        setn+"/{sample}/EukRep_contigs_from_unfiltered.fasta"
    log:
        setn+"/{sample}/log_EukRep.txt"
    shell:
        "{{ time EukRep -i {input} -o {output} -m lenient --min "+str(mincontiglen)+" ; }} 2> {log} ; "

# QUAST

rule QUAST_multisample_raw_contigs:
    input:
        expand("{setn}/{sample}/megahit_unfiltered/final.contigs.fa", sample=config["SAMPLE"],setn=setn)
    output:
        directory(setn+"/quast_multi_raw")
    conda:
        mainfolder + "/yaml/quast.yaml"
    threads: 4
    shell:
        #"time quast -t {threads} --silent -o {output} {input}"
        "quast -t {threads} --min-contig "+str(mincontiglen)+" --silent -o {output} {input}"

rule QUAST_multisample_EukRep:
    input:
        expand("{setn}/{sample}/EukRep_contigs_from_unfiltered.fasta", sample=config["SAMPLE"],setn=setn)
    output:
        directory(setn+"/quast_multi_EukRep")
    conda:
        mainfolder + "/yaml/quast.yaml"
    threads: 4
    shell: 
        #"time quast -t {threads} --silent -o {output} {input}"
        "quast -t {threads} --min-contig "+str(mincontiglen)+" --silent -o {output} {input}"



# Concatenating all EukRep contigs
rule contig_concatenating:
    input:
        expand("{setn}/{sample}/EukRep_contigs_from_unfiltered.fasta", sample=config["SAMPLE"],setn=setn)
    output:
        setn+"/EukRep_contigs_renamed_cat.fasta"
    shell:
        mainfolder + "/scripts/contig_rename_concat.sh {output} {input}" 



# MetaEuk 
rule MetaEuk_createdb:
    input:
        setn+"/EukRep_contigs_renamed_cat.fasta"
    output:
        directory(setn+"/contigs_db")
    threads: maxthreads
    shell:
        "mkdir -p {output}; "
        "metaeuk createdb {input} {output}/contigs --dbtype 2"

rule MetaEuk_easy_predict:
    input:
        setn+"/contigs_db", #{input[0]}
        EUK_PROFILES        #{input[1]}
    output:
        setn+"/MetaEuk_preds.fasta",        #{output[0]}
        directory(setn+"/tempFolder") #{output[1]}
    log:
        setn+"/log_MetaEuk_easypredict.txt"
    threads: maxthreads
    resources: mem_mb=120000
    shell:
        "{{ time metaeuk easy-predict {input[0]}/contigs {input[1]} {output[0]} {output[1]}"
        " --metaeuk-eval 0.0001 -e 100 --slice-search --min-ungapped-score 35"
        " --min-length 40 --min-exon-aa 20 --metaeuk-tcov 0.6; }} 2> {log}"

